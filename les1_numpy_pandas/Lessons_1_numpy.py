#!/usr/bin/env python
# coding: utf-8

# ### Первое задание

# Импортируйте библиотеку Numpy и дайте ей псевдоним np.
# Создайте массив Numpy под названием a размером 5x2, то есть состоящий из 5 строк и 2 столбцов. Первый столбец должен содержать числа 1, 2, 3, 3, 1, а второй - числа 6, 8, 11, 10, 7. Будем считать, что каждый столбец - это признак, а строка - наблюдение. Затем найдите среднее значение по каждому признаку, используя метод mean массива Numpy. Результат запишите в массив mean_a, в нем должно быть 2 элемента.
# 

# In[3]:


import numpy as np


# In[4]:


a = np.array([[1, 6],
              [2, 8],
              [3, 11],
              [3, 10],
              [1, 7]])


# In[5]:


a.shape


# In[6]:


mean_a = a.mean(axis = 0)
mean_a


# ### Второе задание
# 

# Вычислите массив a_centered, отняв от значений массива “а” средние значения соответствующих признаков, содержащиеся в массиве mean_a. Вычисление должно производиться в одно действие. Получившийся массив должен иметь размер 5x2.
# 

# In[7]:


a_centered = a - mean_a


# In[8]:


a_centered


# ### Третье задание
# 

# Найдите скалярное произведение столбцов массива a_centered. В результате должна получиться величина a_centered_sp. Затем поделите a_centered_sp на N-1, где N - число наблюдений.
# 

# In[9]:


a_centered_sp = np.dot(a_centered[:, 0], a_centered[:, 1])
a_centered_sp


# In[10]:


a_cov = a_centered_sp / (len(a[:, 0])-1)
a_cov


# ### Четвертое задание

# В этом задании проверьте получившееся число, вычислив ковариацию еще одним способом - с помощью функции np.cov. В качестве аргумента m функция np.cov должна принимать транспонированный массив “a”. В получившейся ковариационной матрице (массив Numpy размером 2x2) искомое значение ковариации будет равно элементу в строке с индексом 0 и столбце с индексом 1.
# 

# In[11]:


at = a.transpose()
at


# In[12]:


a_covar = np.cov(at)
a_covar


# In[13]:


a_cov2 = a_covar[0, 1]
a_cov2


# In[14]:


a_cov == a_cov2


# In[ ]:




